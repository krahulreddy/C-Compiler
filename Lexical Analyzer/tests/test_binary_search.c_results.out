Line			Lexeme			Token Class
1		#include <stdio.h> 		Pre Processor directive

2
3			int 			KEYWORD
			binarySearch 			IDENTIFIER
			( 			OPENING BRACKETS
			int 			KEYWORD
			arr 			ARRAY IDENTIFIER
			[ 			SQUARE OPENING BRACKETS
			] 			SQUARE CLOSING BRACKETS
			, 			COMMA DELIMITER
			int 			KEYWORD
			f 			IDENTIFIER
			, 			COMMA DELIMITER
			int 			KEYWORD
			l 			IDENTIFIER
			, 			COMMA DELIMITER
			int 			KEYWORD
			x 			IDENTIFIER
			) 			CLOSING BRACKETS

4			{ 			OPENING BRACES

5			if 			KEYWORD
			( 			OPENING BRACKETS
			l 			IDENTIFIER
			>= 			OPERATOR
			f 			IDENTIFIER
			) 			CLOSING BRACKETS

6			{ 			OPENING BRACES

7			int 			KEYWORD
			m 			IDENTIFIER
			= 			OPERATOR
			f 			IDENTIFIER
			+ 			OPERATOR
			( 			OPENING BRACKETS
			l 			IDENTIFIER
			- 			OPERATOR
			f 			IDENTIFIER
			) 			CLOSING BRACKETS
			/ 			OPERATOR
			2 			NUMBER CONSTANT
			; 			SEMICOLON DELIMITER

8
9			if 			KEYWORD
			( 			OPENING BRACKETS
			arr 			ARRAY IDENTIFIER
			[ 			SQUARE OPENING BRACKETS
			m 			IDENTIFIER
			] 			SQUARE CLOSING BRACKETS
			== 			OPERATOR
			x 			IDENTIFIER
			) 			CLOSING BRACKETS

10			return 			KEYWORD
			( 			OPENING BRACKETS
			m 			IDENTIFIER
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

11			else 			KEYWORD
			if 			KEYWORD
			( 			OPENING BRACKETS
			arr 			ARRAY IDENTIFIER
			[ 			SQUARE OPENING BRACKETS
			m 			IDENTIFIER
			] 			SQUARE CLOSING BRACKETS
			> 			OPERATOR
			x 			IDENTIFIER
			) 			CLOSING BRACKETS

12			return 			KEYWORD
			( 			OPENING BRACKETS
			binarySearch 			IDENTIFIER
			( 			OPENING BRACKETS
			arr 			IDENTIFIER
			, 			COMMA DELIMITER
			f 			IDENTIFIER
			, 			COMMA DELIMITER
			m 			IDENTIFIER
			- 			OPERATOR
			1 			NUMBER CONSTANT
			, 			COMMA DELIMITER
			x 			IDENTIFIER
			) 			CLOSING BRACKETS
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

13			else 			KEYWORD

14			return 			KEYWORD
			( 			OPENING BRACKETS
			binarySearch 			IDENTIFIER
			( 			OPENING BRACKETS
			arr 			IDENTIFIER
			, 			COMMA DELIMITER
			m 			IDENTIFIER
			+ 			OPERATOR
			1 			NUMBER CONSTANT
			, 			COMMA DELIMITER
			l 			IDENTIFIER
			, 			COMMA DELIMITER
			x 			IDENTIFIER
			) 			CLOSING BRACKETS
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

15			} 			CLOSING BRACES

16
17			return 			KEYWORD
			( 			OPENING BRACKETS
			- 			OPERATOR
			1 			NUMBER CONSTANT
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

18			} 			CLOSING BRACES

19			int 			KEYWORD
			main 			KEYWORD
			( 			OPENING BRACKETS
			) 			CLOSING BRACKETS

20			{ 			OPENING BRACES

21			int 			KEYWORD
			num 			IDENTIFIER
			, 			COMMA DELIMITER
			x 			IDENTIFIER
			, 			COMMA DELIMITER
			i 			IDENTIFIER
			, 			COMMA DELIMITER
			j 			IDENTIFIER
			; 			SEMICOLON DELIMITER

22
23			printf 			IDENTIFIER
			( 			OPENING BRACKETS
			"Enter the size of the array : \n" 			STRING CONSTANT
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

24			scanf 			IDENTIFIER
			( 			OPENING BRACKETS
			"%d" 			STRING CONSTANT
			, 			COMMA DELIMITER
			& 			OPERATOR
			num 			IDENTIFIER
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

25
26			int 			KEYWORD
			arr 			ARRAY IDENTIFIER
			[ 			SQUARE OPENING BRACKETS
			num 			IDENTIFIER
			] 			SQUARE CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

27
28			printf 			IDENTIFIER
			( 			OPENING BRACKETS
			"Enter the elements of the array in ascending order : \n" 			STRING CONSTANT
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

29			for 			KEYWORD
			( 			OPENING BRACKETS
			i 			IDENTIFIER
			= 			OPERATOR
			0 			NUMBER CONSTANT
			; 			SEMICOLON DELIMITER
			i 			IDENTIFIER
			< 			OPERATOR
			num 			IDENTIFIER
			; 			SEMICOLON DELIMITER
			i 			IDENTIFIER
			++ 			OPERATOR
			) 			CLOSING BRACKETS

30			{ 			OPENING BRACES

31			scanf 			IDENTIFIER
			( 			OPENING BRACKETS
			"%d" 			STRING CONSTANT
			, 			COMMA DELIMITER
			& 			OPERATOR
			arr 			ARRAY IDENTIFIER
			[ 			SQUARE OPENING BRACKETS
			i 			IDENTIFIER
			] 			SQUARE CLOSING BRACKETS
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

32			} 			CLOSING BRACES

33
34			printf 			IDENTIFIER
			( 			OPENING BRACKETS
			"Enter the element to be searched for : \n" 			STRING CONSTANT
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

35			scanf 			IDENTIFIER
			( 			OPENING BRACKETS
			"%d" 			STRING CONSTANT
			, 			COMMA DELIMITER
			& 			OPERATOR
			x 			IDENTIFIER
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

36
37			i 			IDENTIFIER
			= 			OPERATOR
			binarySearch 			IDENTIFIER
			( 			OPENING BRACKETS
			arr 			IDENTIFIER
			, 			COMMA DELIMITER
			0 			NUMBER CONSTANT
			, 			COMMA DELIMITER
			num 			IDENTIFIER
			, 			COMMA DELIMITER
			x 			IDENTIFIER
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

38
39			if 			KEYWORD
			( 			OPENING BRACKETS
			i 			IDENTIFIER
			== 			OPERATOR
			- 			OPERATOR
			1 			NUMBER CONSTANT
			) 			CLOSING BRACKETS

40			printf 			IDENTIFIER
			( 			OPENING BRACKETS
			"%d does not exist in the array\n" 			STRING CONSTANT
			, 			COMMA DELIMITER
			x 			IDENTIFIER
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

41			else 			KEYWORD

42			printf 			IDENTIFIER
			( 			OPENING BRACKETS
			"%d exists at the location %d in the array\n" 			STRING CONSTANT
			, 			COMMA DELIMITER
			x 			IDENTIFIER
			, 			COMMA DELIMITER
			i 			IDENTIFIER
			+ 			OPERATOR
			1 			NUMBER CONSTANT
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

43
44			return 			KEYWORD
			( 			OPENING BRACKETS
			0 			NUMBER CONSTANT
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

45
46
47			} 			CLOSING BRACES


SYMBOL TABLE

	f		IDENTIFIER
	i		IDENTIFIER
	j		IDENTIFIER
	l		IDENTIFIER
	m		IDENTIFIER
	x		IDENTIFIER
	num		IDENTIFIER
	binarySearch		IDENTIFIER
	scanf		IDENTIFIER
	for		KEYWORD
	return		KEYWORD
	if		KEYWORD
	int		KEYWORD
	main		KEYWORD
	arr		IDENTIFIER
	else		KEYWORD
	printf		IDENTIFIER


CONSTANT TABLE

	"%d exists at the location %d in the array\n"		STRING CONSTANT
	"Enter the element to be searched for : \n"		STRING CONSTANT
	"Enter the elements of the array in ascending order : \n"		STRING CONSTANT
	"Enter the size of the array : \n"		STRING CONSTANT
	"%d"		STRING CONSTANT
	"%d does not exist in the array\n"		STRING CONSTANT
	0		NUMBER CONSTANT
	1		NUMBER CONSTANT
	2		NUMBER CONSTANT
