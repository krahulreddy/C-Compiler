Line			Lexeme			Token Class
1			//542265 			- SINGLE LINE COMMENT

2		#include <stdio.h> 		Pre Processor directive

3
4			int 			KEYWORD
			binarySearch 			IDENTIFIER
			( 			OPENING BRACKETS
			int 			KEYWORD
			arr 			ARRAY IDENTIFIER
			[ 			SQUARE OPENING BRACKETS
			] 			SQUARE CLOSING BRACKETS
			, 			COMMA DELIMITER
			int 			KEYWORD
			f 			IDENTIFIER
			, 			COMMA DELIMITER
			int 			KEYWORD
			l 			IDENTIFIER
			, 			COMMA DELIMITER
			int 			KEYWORD
			x 			IDENTIFIER
			) 			CLOSING BRACKETS

5			{ 			OPENING BRACES

6			if 			KEYWORD
			( 			OPENING BRACKETS
			l 			IDENTIFIER
			>= 			OPERATOR
			f 			IDENTIFIER
			) 			CLOSING BRACKETS

7			{ 			OPENING BRACES

8			int 			KEYWORD
			m 			IDENTIFIER
			= 			OPERATOR
			f 			IDENTIFIER
			+ 			OPERATOR
			( 			OPENING BRACKETS
			l 			IDENTIFIER
			- 			OPERATOR
			f 			IDENTIFIER
			) 			CLOSING BRACKETS
			/ 			OPERATOR
			2 			NUMBER CONSTANT
			; 			SEMICOLON DELIMITER

9
10			if 			KEYWORD
			( 			OPENING BRACKETS
			arr 			ARRAY IDENTIFIER
			[ 			SQUARE OPENING BRACKETS
			m 			IDENTIFIER
			] 			SQUARE CLOSING BRACKETS
			== 			OPERATOR
			x 			IDENTIFIER
			) 			CLOSING BRACKETS

11			return 			KEYWORD
			( 			OPENING BRACKETS
			m 			IDENTIFIER
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

12			else 			KEYWORD
			if 			KEYWORD
			( 			OPENING BRACKETS
			arr 			ARRAY IDENTIFIER
			[ 			SQUARE OPENING BRACKETS
			m 			IDENTIFIER
			] 			SQUARE CLOSING BRACKETS
			> 			OPERATOR
			x 			IDENTIFIER
			) 			CLOSING BRACKETS

13			return 			KEYWORD
			( 			OPENING BRACKETS
			binarySearch 			IDENTIFIER
			( 			OPENING BRACKETS
			arr 			IDENTIFIER
			, 			COMMA DELIMITER
			f 			IDENTIFIER
			, 			COMMA DELIMITER
			m 			IDENTIFIER
			- 			OPERATOR
			1 			NUMBER CONSTANT
			, 			COMMA DELIMITER
			x 			IDENTIFIER
			) 			CLOSING BRACKETS
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

14			else 			KEYWORD

15			return 			KEYWORD
			( 			OPENING BRACKETS
			binarySearch 			IDENTIFIER
			( 			OPENING BRACKETS
			arr 			IDENTIFIER
			, 			COMMA DELIMITER
			m 			IDENTIFIER
			+ 			OPERATOR
			1 			NUMBER CONSTANT
			, 			COMMA DELIMITER
			l 			IDENTIFIER
			, 			COMMA DELIMITER
			x 			IDENTIFIER
			) 			CLOSING BRACKETS
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

16			} 			CLOSING BRACES

17
18			return 			KEYWORD
			( 			OPENING BRACKETS
			- 			OPERATOR
			1 			NUMBER CONSTANT
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

19			} 			CLOSING BRACES

20			int 			KEYWORD
			main 			KEYWORD
			( 			OPENING BRACKETS
			) 			CLOSING BRACKETS

21			{ 			OPENING BRACES

22			int 			KEYWORD
			num 			IDENTIFIER
			, 			COMMA DELIMITER
			x 			IDENTIFIER
			, 			COMMA DELIMITER
			i 			IDENTIFIER
			, 			COMMA DELIMITER
			j 			IDENTIFIER
			; 			SEMICOLON DELIMITER

23
24			printf 			IDENTIFIER
			( 			OPENING BRACKETS
			"Enter the size of the array : \n" 			STRING CONSTANT
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

25			scanf 			IDENTIFIER
			( 			OPENING BRACKETS
			"%d" 			STRING CONSTANT
			, 			COMMA DELIMITER
			& 			OPERATOR
			num 			IDENTIFIER
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

26
27			int 			KEYWORD
			arr 			ARRAY IDENTIFIER
			[ 			SQUARE OPENING BRACKETS
			num 			IDENTIFIER
			] 			SQUARE CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

28
29			printf 			IDENTIFIER
			( 			OPENING BRACKETS
			"Enter the elements of the array in ascending order : \n" 			STRING CONSTANT
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

30			for 			KEYWORD
			( 			OPENING BRACKETS
			i 			IDENTIFIER
			= 			OPERATOR
			0 			NUMBER CONSTANT
			; 			SEMICOLON DELIMITER
			i 			IDENTIFIER
			< 			OPERATOR
			num 			IDENTIFIER
			; 			SEMICOLON DELIMITER
			i 			IDENTIFIER
			++ 			OPERATOR
			) 			CLOSING BRACKETS

31			{ 			OPENING BRACES

32			scanf 			IDENTIFIER
			( 			OPENING BRACKETS
			"%d" 			STRING CONSTANT
			, 			COMMA DELIMITER
			& 			OPERATOR
			arr 			ARRAY IDENTIFIER
			[ 			SQUARE OPENING BRACKETS
			i 			IDENTIFIER
			] 			SQUARE CLOSING BRACKETS
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

33			} 			CLOSING BRACES

34
35			printf 			IDENTIFIER
			( 			OPENING BRACKETS
			"Enter the element to be searched for : \n" 			STRING CONSTANT
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

36			scanf 			IDENTIFIER
			( 			OPENING BRACKETS
			"%d" 			STRING CONSTANT
			, 			COMMA DELIMITER
			& 			OPERATOR
			x 			IDENTIFIER
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

37
38			i 			IDENTIFIER
			= 			OPERATOR
			binarySearch 			IDENTIFIER
			( 			OPENING BRACKETS
			arr 			IDENTIFIER
			, 			COMMA DELIMITER
			0 			NUMBER CONSTANT
			, 			COMMA DELIMITER
			num 			IDENTIFIER
			, 			COMMA DELIMITER
			x 			IDENTIFIER
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

39
40			if 			KEYWORD
			( 			OPENING BRACKETS
			i 			IDENTIFIER
			== 			OPERATOR
			- 			OPERATOR
			1 			NUMBER CONSTANT
			) 			CLOSING BRACKETS

41			printf 			IDENTIFIER
			( 			OPENING BRACKETS
			"%d does not exist in the array\n" 			STRING CONSTANT
			, 			COMMA DELIMITER
			x 			IDENTIFIER
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

42			else 			KEYWORD

43			printf 			IDENTIFIER
			( 			OPENING BRACKETS
			"%d exists at the location %d in the array\n" 			STRING CONSTANT
			, 			COMMA DELIMITER
			x 			IDENTIFIER
			, 			COMMA DELIMITER
			i 			IDENTIFIER
			+ 			OPERATOR
			1 			NUMBER CONSTANT
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

44
45			return 			KEYWORD
			( 			OPENING BRACKETS
			0 			NUMBER CONSTANT
			) 			CLOSING BRACKETS
			; 			SEMICOLON DELIMITER

46
47
48			} 			CLOSING BRACES


SYMBOL TABLE

	f			IDENTIFIER
	i			IDENTIFIER
	j			IDENTIFIER
	l			IDENTIFIER
	m			IDENTIFIER
	x			IDENTIFIER
	num			IDENTIFIER
	binarySearch			IDENTIFIER
	scanf			IDENTIFIER
	for			KEYWORD
	return			KEYWORD
	if			KEYWORD
	int			KEYWORD
	main			KEYWORD
	arr			IDENTIFIER
	else			KEYWORD
	printf			IDENTIFIER


CONSTANT TABLE

	"%d exists at the location %d in the array\n"			STRING CONSTANT
	"Enter the element to be searched for : \n"			STRING CONSTANT
	"Enter the elements of the array in ascending order : \n"			STRING CONSTANT
	"Enter the size of the array : \n"			STRING CONSTANT
	"%d"			STRING CONSTANT
	"%d does not exist in the array\n"			STRING CONSTANT
	0			NUMBER CONSTANT
	1			NUMBER CONSTANT
	2			NUMBER CONSTANT
